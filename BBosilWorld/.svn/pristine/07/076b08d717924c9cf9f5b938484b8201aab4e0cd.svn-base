package com.bbosil.review.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bbosil.notice.vo.NoticeVO;
import com.bbosil.review.service.ReviewService;
import com.bbosil.review.vo.ReviewVO;
import com.bbosil.util.str.ReplaceChar;
import com.webjjang.util.file.FileUtil;
import com.webjjang.util.page.PageObject;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/review")
@Log4j
public class ReviewController {
	
	@Autowired
	private ReviewService service;
	
	String path = "/resources/upload/review";
	
	// 리뷰 리스트 - /review/list.do : get
	@GetMapping("/list.do")
	public String list(Model model, HttpServletRequest request) throws Exception {
		
		log.info("----- 리뷰 리스트 실행 -----");
		
		// pageObject 만들기 : List<ReviewVO>가 결과로 나온다. 
		
		PageObject pageObject = PageObject.getInstance(request);
		
		// model에 데이터를 속성으로 추가하면 request에 담긴다 -> jsp까지 전달된다. 
		model.addAttribute("list", service.list(pageObject));
		
		// list.jsp에서 페이지 처리에 필요하다. 
		model.addAttribute("pageObject", pageObject);
		
		return "review/list";
	}
	
	// 리뷰 상세 보기 - /review/view.do : get
	@GetMapping("/view.do")
	public String view(Model model, Long no) {
		
		log.info("----- 리뷰 상세보기 실행 -----");
		
		ReviewVO vo = service.view(no);
		
		// 특수문자 처리 - 리뷰 상세보기 
		vo.setContent(ReplaceChar.specialChar(vo.getContent()));
		
		model.addAttribute("vo", vo);
		
		return "review/view";
	}
	
	// 리뷰 상세보기 글 등록 폼 - /review/write.do : get
	@GetMapping("/write.do")
	public String writeForm() {
		
		log.info("----- 리뷰 글 등록 폼 -----");
		
		return "review/write";
	}
	
	// 리뷰 상세보기 글 등록 처리 - /review/write.do : post
	
	@PostMapping("/write.do")
	public String write(ReviewVO vo, Long perPageNum, MultipartFile[] ImageFiles, HttpServletRequest request, RedirectAttributes rttr) throws Exception 
	
	{
		
		log.info("----- 리뷰 글 등록 처리 -----");
		
		// 서버에 파일을 저장하고 저장된 파일명 받기 
	    List<ReviewVO> fileName = new ArrayList<ReviewVO>();
	    for (MultipartFile imageFile : ImageFiles) {
	    }
		
//		
//		vo.setFileName(fileName);
//		
//		
//		List<ReviewVO> fileName = new ArrayList<ReviewVO>();
//	    for (MultipartFile imageFile : ImageFiles) {
//	    	String fileName = FileUtil.upload(path, ImageFiles[i], request);
//	        fileNames.add(fileName);
//	    }
//		
//		
		
		
		
		
		log.info(vo); // 데이터 수집 확인
		
		// 이미지 파일명을 저장하는 객체 
		
		service.write(vo);
		
		rttr.addFlashAttribute("msg", "리뷰 글 등록("+ vo.getNo() +"번) 되었습니다. ");
		
		// 처리가 끝나면 리스트로 이동한다. - redirect
		
		return "redirect:list.do?perPageNum=" + perPageNum;
	}
	
	// 리뷰 글 수정 폼 - /review/update.do : get
	
	@GetMapping("/update.do")
	public String updateForm(Long no, Model model) {
		
		log.info("----- 리뷰 글 수정 폼 -----");
		
		// DB에서 데이터를 가져오기 (리뷰 보기) - no 필요
		// 가져온 데이터를 Model(=request)에 담는다. 
		
		model.addAttribute("vo", service.view(no));
		
		return "notice/update";
	}
	
	@PostMapping("/update.do")
	public String update(ReviewVO vo, PageObject pageObject, RedirectAttributes rttr) throws Exception {
		
		log.info("----- 리뷰 글 수정 처리 -----");
		log.info(vo); // 데이터 수집 확인
		
		int result = service.update(vo);
		
		// result = 1 : 수정 성공
		// = 0 : 수정 실패 - 번호나 비밀번호가 틀립니다. 
		
		log.info(result);
		
		if(result == 1) rttr.addFlashAttribute("msg", "리뷰 글 (" +vo.getNo()+ ")이 수정되었습니다. ");
		else rttr.addFlashAttribute("msg", "리뷰 글("+vo.getNo()+")이 수정되지 않았습니다. ");
		
		// 처리가 끝나면 리스트로 이동한다. - redirect
		
		return "redirect:view.do?no=" + vo.getNo()
		+ "&" + pageObject.getPageQuery();
	}
	
	public String delete(ReviewVO vo, long perPageNum, RedirectAttributes rttr) {
		
		log.info("----- 리뷰 글삭제 처리 -----");
		log.info(vo); // 데이터 수집 확인
		
		int result = service.delete(vo);
		
		log.info(result);
		
		if(result == 1) rttr.addFlashAttribute("msg", "리뷰 글 (" + vo.getNo() + ")번이 삭제되었습니다. ");
		else rttr.addFlashAttribute("msg", "리뷰 글 (" + vo.getNo() + ")번이 삭제되지 않았습니다. ");
		
		// 처리가 끝나면 리스트로 이동한다. - redirect
		
		return "redirect:list.do?perPageNum=" + perPageNum;
	}

}
